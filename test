import json
import subprocess
import time
import os
import logging
from datetime import datetime, timedelta

from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from webdriver_manager.firefox import GeckoDriverManager

LOG_PREFIX = "[AVATAR_AI]:"
RUNTIME_AUDIO_DIRECTORY = "runtime_audios"
MEETING_ALIVE_FILE_NAME = "meeting_alive_check.txt"
AUDIO_TEXT_FILE = "Audio_Started.txt"
AUDIO_FILE = "Audio_File.txt"
MEETING_ENDED_FILE = "meeting_ended_file.txt"
DROP_BOT_FILE = "drop_bot.txt"


def switch_to_frame(driver):
    iframe = driver.find_element_by_xpath("//iframe[@id='webclient']")
    if iframe:
        driver.switch_to.frame(iframe)
    return driver


logging.basicConfig(level=logging.INFO, format='%(asctime)s %(name)s %(levelname)s:%(message)s',
                    filename="access_logger.log")
logger = logging.getLogger("recording_bot_logs")


def open_available_browser():
    options = Options()
    options.add_argument("-–disable-blink-features")
    options.add_argument("-–disable-notifications")
    options.set_preference("permissions.default.microphone", 2)
    options.set_preference("permissions.default.camera", 2)
    options.set_preference("media.navigator.permission.disabled", True)
    options.add_argument(
        "--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36")
    firefox_profile = webdriver.FirefoxProfile()
    firefox_profile.set_preference("network.cookie.cookieBehavior", 1)
    browser = webdriver.Firefox(executable_path=GeckoDriverManager().install(), options=options,
                                firefox_profile=firefox_profile)
    browser.implicitly_wait(30)
    return browser


def join_into_meeting(log_prefix, browser, meeting_url, avatar_name, threshold_wait_in_minutes, meeting_started_at):
    tries = 1
    while True:
        browser.get(meeting_url)
        try:
            try:
                cookies_accept_button = browser.find_element_by_xpath("//button[@id='onetrust-accept-btn-handler']")
                if cookies_accept_button:
                    cookies_accept_button.click()
            except Exception:
                pass
            launch_meeting_button = browser.find_element_by_xpath("//div[contains(text(), 'Launch Meeting')]")
            if launch_meeting_button:
                launch_meeting_button.click()
            join_from_browser = browser.find_element_by_xpath("//a[contains(text(), 'Join from your browser')]")
            if join_from_browser:
                join_from_browser.click()

            browser = switch_to_frame(browser)
            input_for_name = browser.find_element_by_xpath("//input[@id='input-for-name']")
            if input_for_name:
                input_for_name.send_keys(avatar_name)
            time.sleep(20)
            try:
                video_btn = browser.find_element_by_id('preview-video-control-button')
                if video_btn:
                    video_btn.click()
            except Exception as e:
                print(f"Failed to turn off camera with error='{e}'.")
            try:
                audio_btn = browser.find_element_by_id('preview-audio-control-button')
                if audio_btn:
                    audio_btn.click()
            except Exception as e:
                print(f"Failed to turn off mic with error='{e}'.")

            join_button = browser.find_element_by_xpath("//button[contains(@class, 'preview-join-button')]")
            if join_button:
                join_button.click()
                return browser
        except Exception as e:
            if tries == 10:
                tries = 1
            elif tries == 1:
                print(f"{log_prefix} Failed to join into the meeting with error='{e}' tries='{tries}'")
            if not is_valid_till_wait_time(meeting_started_at, threshold_wait_in_minutes):
                print(f"{log_prefix} Leaving because threshold reaches error='{e}' tries='{tries}'")
                break
            tries += 1
            time.sleep(5)
    return browser


def trigger_realtime_transcriber(pyaudio_file_name, payload):
    subprocess.Popen(
        [
            "python3",
            os.path.join(
                os.path.dirname(os.path.realpath(__file__)), pyaudio_file_name
            ),
            "-payload",
            json.dumps(payload['basic_data']),
        ]
    )


def is_valid_till_wait_time(start_time_ts=None, threshold_wait_in_minutes=None):
    if start_time_ts and threshold_wait_in_minutes:
        return start_time_ts + timedelta(minutes=threshold_wait_in_minutes) > datetime.utcnow()
    return True


def check_and_play_audio_from_directory(log_prefix, browser):
    while not os.path.exists(AUDIO_TEXT_FILE):
        if not is_valid_till_wait_time():
            print(f"{log_prefix} Dropping due to threshold reaches.")
            return
        if os.path.exists(DROP_BOT_FILE):
            print(f"{log_prefix} Dropping the bot before any audio found.")
            os.remove(DROP_BOT_FILE)
            return

    print(f"{log_prefix} Starting listening to the audios.")
    while True:
        try:
            if os.path.exists(DROP_BOT_FILE):
                print(f"{log_prefix} Drop bot file found so exiting the bot from meeting.")
                return
            if not os.path.exists(AUDIO_FILE):
                continue
            # TODO: audio_files = [file for file in os.listdir(RUNTIME_AUDIO_DIRECTORY) if file.endswith(".mp3")]
            audio_files = [file for file in os.listdir() if file.endswith(".mp3")]
            if not audio_files:
                continue
            try:
                browser.find_element_by_xpath("//body").click()
                browser.find_element_by_xpath("//button[contains(@aria-label,'unmute my microphone')]").click()
                print(f"{log_prefix} Turned on the mic.")
            except:
                print(f"{log_prefix} Unable to turn ON mic.")
            for audio_file in audio_files:
                # TODO: audio_file_path = f"{RUNTIME_AUDIO_DIRECTORY}/{audio_file}"
                audio_file_path = f"{audio_file}"
                print(f"{log_prefix} Playing audio file audio_file_path={audio_file_path}")
                os.system(f"mpg123 {audio_file_path}")
                time.sleep(3)
                os.remove(f"{audio_file_path}")
                print(f"{log_prefix} Audio Played successfully and audio file has been removed audio_file_path={audio_file_path}")
            if os.path.exists(AUDIO_FILE):
                os.remove(AUDIO_FILE)
            try:
                browser.find_element_by_xpath("//body").click()
                browser.find_element_by_xpath("//button[contains(@aria-label,'mute my microphone')]").click()
                print(f"{log_prefix} Turned off the mic.")
            except:
                print(f"{log_prefix} Unable to turn OFF mic.")
        except Exception as e:
            print(e)


def open_zoom_meeting(payload):
    meeting_id = payload["meeting_id"]
    meeting_started_at = datetime.utcnow()
    log_prefix = f"{LOG_PREFIX} meeting_id='{meeting_id}'"
    print(f"{log_prefix} Starting bot joining process with payload={payload}")
    avatar_name = payload.get("avatar_name", "Aviso Avatar")
    meeting_url = payload["meeting_url"]
    threshold_wait_in_minutes = payload.get("threshold_wait_in_minutes", 30)
    pyaudio_file_name = "pyaudio_with_dg.py"
    print(f"{log_prefix} Opening available browser.")
    browser = open_available_browser()
    print(f"{log_prefix} Browser open successfully.")

    print(
        f"{log_prefix} Joining into the zoom meeting with meeting_url='{meeting_url}' avatar_name='{avatar_name}'")
    browser = join_into_meeting(log_prefix, browser, meeting_url, avatar_name, threshold_wait_in_minutes, meeting_started_at)
    print(f"{log_prefix} Joined into the zoom meeting with meeting_url='{meeting_url}' avatar_name='{avatar_name}'")

    print(f"{log_prefix} Trigger realtime transcriber avatar_name='{avatar_name}'")
    trigger_realtime_transcriber(pyaudio_file_name, payload)
    print(f"{log_prefix} Triggered realtime transcriber avatar_name='{avatar_name}'")

    print(f"{log_prefix} Check and play audio when found avatar_name='{avatar_name}'")
    check_and_play_audio_from_directory(log_prefix, browser)
    print(f"{log_prefix} Process completed avatar_name='{avatar_name}'")
    browser.quit()
    if os.path.exists(DROP_BOT_FILE):
        print(f"{log_prefix} Removing drop bot file.")
        os.remove(DROP_BOT_FILE)

    if os.path.exists(MEETING_ALIVE_FILE_NAME):
        print(f"{log_prefix} Removing meeting alive file.")
        os.remove(MEETING_ALIVE_FILE_NAME)

    if os.path.exists(AUDIO_TEXT_FILE):
        print(f"{log_prefix} Removing audio test file file.")
        os.remove(AUDIO_TEXT_FILE)

    if not os.path.exists(MEETING_ENDED_FILE):
        f1 = open(MEETING_ENDED_FILE, "w")
        f1.write("Meeting ended")
        f1.close()
        print(f"{log_prefix} Added meeting ended file.")


if __name__ == "__main__":
    import argparse

    # parser = argparse.ArgumentParser()
    # parser.add_argument("-payload", "-s", type=str, required=True)
    # args = parser.parse_args()
    # json_payload = json.loads(args.payload)
    json_payload= {"meeting_url": "https://aviso.zoom.us/j/84101717055?pwd=PV98Lu0wPAIJWzEycpnIMDWDca9Uw5.1", "meeting_id": "84101717055", "basic_data": {"auth_key": "", "meeting_id": "84101717055"}}
    open_zoom_meeting(json_payload)

"""
python3 avatar_ai/host_meeting_with_browser.py -payload='{"meeting_url": "https://aviso.zoom.us/j/84101717055?pwd=PV98Lu0wPAIJWzEycpnIMDWDca9Uw5.1", "meeting_id": "84101717055", "basic_data": {"auth_key": ""}}'
"""
