import time
import os

from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.webdriver import WebDriver
from webdriver_manager.firefox import GeckoDriverManager

ZOOM_MEETING_LINK = "https://aviso.zoom.us/j/84101717055?pwd=PV98Lu0wPAIJWzEycpnIMDWDca9Uw5.1"  # Replace with your Zoom meeting link
USERNAME = "Notetaker"
driver = None
RUNTIME_AUDIO_DIRECTORY = "runtime_audios"


def switch_to_frame(driver):
    iframe = driver.find_element_by_xpath("//iframe[@id='webclient']")
    if iframe:
        driver.switch_to.frame(iframe)
    return driver


def check_and_play_audio_from_directory(browser, first_time_tried=False):
    while True:
        try:
            audio_files = [file for file in os.listdir(RUNTIME_AUDIO_DIRECTORY) if file.endswith(".mp3")]
            if not audio_files and first_time_tried:
                continue
            browser.find_element_by_xpath("//body").click()
            mic_button = browser.find_element_by_xpath("//button[contains(@class, 'join-audio-container__btn')]//span")
            mic_button_text = mic_button.text
            if mic_button_text == "Unmute":
                mic_button.click()
            for audio_file in audio_files:
                audio_file_path = f"{RUNTIME_AUDIO_DIRECTORY}/{audio_file}"
                os.system(f"mpg123 {audio_file_path}")
                os.remove(f"{audio_file_path}")
            browser.find_element_by_xpath("//body").click()
            mic_button = browser.find_element_by_xpath("//button[contains(@class, 'join-audio-container__btn')]//span")
            mic_button.click()
            first_time_tried = True
        except Exception as e:
            print(e)


try:
    options = Options()
    options.add_argument("-–disable-blink-features")
    options.add_argument("-–disable-notifications")
    options.set_preference("permissions.default.microphone", 2)
    options.set_preference("permissions.default.camera", 2)
    options.set_preference("media.navigator.permission.disabled", True)
    options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36")
    firefox_profile = webdriver.FirefoxProfile()
    firefox_profile.set_preference("network.cookie.cookieBehavior", 1)

    browser = webdriver.Firefox(executable_path=GeckoDriverManager().install(), options=options, firefox_profile=firefox_profile)
    browser.implicitly_wait(30)
    browser.get(ZOOM_MEETING_LINK)
    try:
        cookies_accept_button = browser.find_element_by_xpath("//button[@id='onetrust-accept-btn-handler']")
        if cookies_accept_button:
            cookies_accept_button.click()
    except Exception as e:
        print("No cookies button to accept.")
    launch_meeting_button = browser.find_element_by_xpath("//div[contains(text(), 'Launch Meeting')]")
    if launch_meeting_button:
        launch_meeting_button.click()
    join_from_browser = browser.find_element_by_xpath("//a[contains(text(), 'Join from your browser')]")
    if join_from_browser:
        join_from_browser.click()

    browser = switch_to_frame(browser)
    input_for_name = browser.find_element_by_xpath("//input[@id='input-for-name']")
    if input_for_name:
        input_for_name.send_keys(USERNAME)

    time.sleep(20)
    try:
        video_btn = browser.find_element_by_id('preview-video-control-button')
        if video_btn:
            video_btn.click()
    except Exception as e:
        print(f"Failed to turn off camera with error='{e}'.")
    try:
        audio_btn = browser.find_element_by_id('preview-audio-control-button')
        if audio_btn:
            audio_btn.click()
    except Exception as e:
        print(f"Failed to turn off mic with error='{e}'.")

    join_button = browser.find_element_by_xpath("//button[contains(@class, 'preview-join-button')]")
    if join_button:
        join_button.click()

    browser.implicitly_wait(1)
    check_and_play_audio_from_directory(browser)

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    # Close the browser after 60 seconds (adjust as needed)
    time.sleep(30)
    if isinstance(driver, WebDriver):
        driver.quit()
