"""
https://aviso.zoom.us/j/82785345104?pwd=GstOeZzRHdtbTfxXTQG5JXuJhZBcJk.1
"""
import cv2
import pyfakewebcam

# Path to your virtual camera (Linux example: /dev/video0)
VIRTUAL_CAMERA_PATH = "/dev/video0"

# Set up video capture (from a webcam or video file)
video_source = 0  # Use 0 for the default webcam, or replace with a video file path
cap = cv2.VideoCapture(video_source)

# Get video properties
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Initialize the virtual camera
fake_cam = pyfakewebcam.FakeWebcam(VIRTUAL_CAMERA_PATH, frame_width, frame_height)

print(f"Streaming to virtual camera: {VIRTUAL_CAMERA_PATH}")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("No more frames to read.")
            break

        # Optional: Apply processing to the frame
        # For example, convert to grayscale:
        # frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Resize to match the virtual camera dimensions
        frame = cv2.resize(frame, (frame_width, frame_height))

        # Convert from BGR (OpenCV format) to RGB (pyfakewebcam expects RGB)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Send the frame to the virtual camera
        fake_cam.schedule_frame(frame_rgb)

finally:
    cap.release()
    print("Video capture released.")
